workspace_type: android
android_sdk_platform: "android-29"
java_language_level: 8

directories:
  java/com/awesome
  third_party

targets:
  //java/com/awesome/android/hello/...:all
  //java/com/awesome/android/helloworld/...:all
  //java/com/awesome/android/hellojni/...:all
  //third_party/...:all

import_run_configurations:
  java/com/awesome/android/helloworld/helloworld.xml

build_flags:
  --verbose_failures

  --android_sdk=@androidsdk//:sdk-29

  # To configure the C++ STL, use the flag --android_crosstool_top.
  # https://docs.bazel.build/versions/master/android-ndk.html#configuring-the-stl
  # Target labels of all available STLs:
  # @androidndk//:toolchain-gnu-libstdcpp : gnustl is the default for NDK r16 and below
  # @androidndk//:toolchain-libcpp        : libc++ is the default for NDK r17 and above
  # @androidndk//:toolchain-stlport       : STLport
  --android_crosstool_top=@androidndk//:toolchain-libcpp

  # To configure the target ABI, use the --fat_apk_cpu flag as follows:
  # https://docs.bazel.build/versions/master/android-ndk.html#configuring-the-target-abi
  # By default, Bazel builds native Android code for "armeabi-v7a"
  # Available ABIs for NDK r17 and above: armeabi-v7a, arm64-v8a, x86, x86_64
  # To build for x86 (e.g. for emulators), pass "--fat_apk_cpu=x86"
  #
  # To build for multiple architectures, pass "--fat_apk_cpu=armeabi-v8a,x86". Multi-ABI Fat APKs
  # are not recommended for release builds since they increase the size of the APK, but can be
  # useful for development and QA builds. If more than one ABI is specified, APK will contain a
  # shared object for each ABI.
  --fat_apk_cpu=arm64-v8a

  --experimental_desugar_java8_libs

  # https://github.com/bazelbuild/bazel/issues/8872
  --strategy=Desugar=sandboxed

  --javacopt="-Xep:BetaApi:OFF"

sync_flags:
  #--incompatible_depset_is_not_iterable=false